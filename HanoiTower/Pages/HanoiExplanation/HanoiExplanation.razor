@page "/hanoiexplanation"
@using HanoiTower.Core
@using HanoiTower.Services
@using HanoiTower.ViewModel
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@inject CalculatorService Calculator
@implements IDisposable

<PageTitle>Hanoi Tower</PageTitle>

<h1>Hanoi Tower explanation</h1>

<EditForm Model="this">
    <p>
        This is the Hanoi Tower's
        <InputSelect @bind-Value="_detailed"> <option value="true">detailed</option> <option value="false">simple</option> </InputSelect>
        explanation for @_numberOfDisks disks.
    </p>
</EditForm>

@if (_solution is null)
{
    <p>Calculating explanation...</p>
}
else
{
    <HanoiExplanationView Solution=@_solution Detailed=@_detailed />
}

@code {
    [CascadingParameter]
    public HanoiInitialData HanoiInitialData { get; set; } = null!;

    private int _numberOfDisks;
    private HanoiRod _sourceRod;
    private HanoiRod _targetRod;
    private HanoiSolution<ObservableHanoiTower>? _solution;
    private bool _detailed = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await CalculateSolution();
        Calculator.Calculate += ClearSolution;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender && _solution is null)
        {
            await CalculateSolution();
            this.StateHasChanged();
        }
    }

    public void Dispose()
    {
        Calculator.Calculate -= ClearSolution;
    }

    protected void ClearSolution(object? sender, HanoiInitialData data)
    {
        _solution = null;
    }

    protected async Task CalculateSolution()
    {
        _numberOfDisks = HanoiInitialData.NumberOfDisks;
        _sourceRod = HanoiInitialData.SourceRod;
        _targetRod = HanoiInitialData.TargetRod;

        var tower = new ObservableHanoiTower(_numberOfDisks, _sourceRod);
        var solverExplainer = new HanoiSolverExplainer<ObservableHanoiTower>();

        _solution = await Task.Run(() =>
            solverExplainer
                .Solve(new HanoiTowerSolutionContext<ObservableHanoiTower>(tower), new HanoiMove(_sourceRod, _targetRod))
                .GetSolution()
        );
    }
}
