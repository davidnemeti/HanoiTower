@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using HanoiTower.Core

<table>
    <tbody>
        @if (Detailed)
        {
            <tr>
                <td>Goal</td>
                <td>@Explanation.Goal.ToString()</td>
            </tr>
        }

        @if (Detailed || Explanation.Location != HanoiExplanationLocation.BeforeMove)
        {
            <tr>
                <td>Begin step</td>
                <td>@Explanation.BeginStep</td>
            </tr>
            <tr>
                <td>Begin state</td>
                <td><SKCanvasView OnPaintSurface="ShowBeginState" EnableRenderLoop="false" style="width:300px; height:100px" /></td>
            </tr>
        }

        <tr>
            <td>Explanation before move</td>
            <td><HanoiExplanationView Explanation=@Explanation.ExplanationBeforeMove Detailed=@Detailed /></td>
        </tr>
        <tr>
            <td>Move</td>
            <td>@Explanation.Move.ToString()</td>
        </tr>
        <tr>
            <td>Explanation after move</td>
            <td><HanoiExplanationView Explanation=@Explanation.ExplanationAfterMove Detailed=@Detailed /></td>
        </tr>

        @if (Detailed || Explanation.Location != HanoiExplanationLocation.AfterMove)
        {
            <tr>
                <td>End state</td>
                <td><SKCanvasView OnPaintSurface="ShowEndState" EnableRenderLoop="false" style="width:300px; height:100px" /></td>
            </tr>
            <tr>
                <td>End step</td>
                <td>@Explanation.EndStep</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    [Parameter]
    public HanoiExplanation<ObservableHanoiTower>.Complex Explanation { get; set; } = null!;

    [Parameter]
    public bool Detailed { get; set; }

    private void ShowBeginState(SKPaintSurfaceEventArgs args)
    {
        ShowState(args, Explanation.BeginState);
    }

    private void ShowEndState(SKPaintSurfaceEventArgs args)
    {
        ShowState(args, Explanation.EndState);
    }

    private void ShowState(SKPaintSurfaceEventArgs args, ObservableHanoiTower tower)
    {
        var info = args.Info;
        var canvas = args.Surface.Canvas;
        var renderer = new ObservableHanoiTowerRenderer(info, canvas);

        renderer.Render(tower);
    }
}
